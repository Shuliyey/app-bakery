---
# tasks file for base (users.yml)

- name: /etc/skel/.profile stat
  stat:
    path: /etc/skel/.profile
  register: skel_profile_result

- name: update /etc/skel/.profile (termtosvg)
  blockinfile:
    path: /etc/skel/.profile
    block: |

      if command -v checkTermToSVG >/dev/null && [ "$(checkTermToSVG)" != "true" ]; then
        _id="$(whoami)-$(date +%FT%T%Z -u)"
        termtosvg /tmp/termtosvg-${_id}.svg -c "script -f /tmp/script-${_id}.script"
        exit
      fi
  when: skel_profile_result.stat.exists

- name: /etc/skel/.bash_profile stat
  stat:
    path: /etc/skel/.bash_profile
  register: skel_bash_profile_result

- name: update /etc/skel/.bash_profile (termtosvg)
  blockinfile:
    path: /etc/skel/.bash_profile
    block: |

      if command -v checkTermToSVG >/dev/null && [ "$(checkTermToSVG)" != "true" ]; then
        _id="$(whoami)-$(date +%FT%T%Z -u)"
        termtosvg /tmp/termtosvg-${_id}.svg -c "script -f /tmp/script-${_id}.script"
        exit
      fi
  when:
    - not skel_profile_result.stat.exists
    - skel_bash_profile_result.stat.exists

- name: create /etc/profile.d/termtosvg.sh
  copy:
    src:   profile.d/termtosvg.sh
    dest:  /etc/profile.d/termtosvg.sh
    owner: root
    group: root
    mode:  0644

- name: create /etc/profile.d/script.sh
  copy:
    src:   profile.d/script.sh
    dest:  /etc/profile.d/script.sh
    owner: root
    group: root
    mode:  0644

- name: "create {{app}} group"
  group:
    name:  "{{app}}"
    state: present

- name: "create {{app}} user"
  user:
    name:    "{{app}}"
    group:   "{{app}}"
    state:   present
    comment: "{{app.capitalize()}}{{ \" (\" + description + \")\" if (description.strip() | length) > 0 else \"\" }}"

- name: "create {{app}} admin group"
  group:
    name:   "{{app}}_admin"
    state:  present

- name: "create {{app}} admin user"
  user:
    name:    "{{app}}_admin"
    group:   "{{app}}_admin"
    state:   present
    comment: "{{app.capitalize()}} Admin{{ \" (\" + description + \")\" if (description.strip() | length) > 0 else \"\" }}"

- name: includedir /etc/sudoers.d
  lineinfile:
    path:   /etc/sudoers
    state:  present
    regexp: '^(#|\s)*includedir\s+/etc/sudoers.d\s*$'
    line:   "#includedir /etc/sudoers.d"
      
- name: "add {{app}} sudoers permissions"
  template:
    src:      "sudoers.d/app.j2"
    dest:     "/etc/sudoers.d/{{app}}"
    owner:    root
    group:    root
    mode:     0440
    validate: /usr/sbin/visudo -cf %s

- name: "get user_list from ssh keys (non hidden) under {{role_path}}/files/ssh/authorized_keys"
  find:
    path: "{{role_path}}/files/ssh/authorized_keys"
  register: user_list_info
  delegate_to: localhost
  become: no
  when: (user_list is not defined) or (user_list is not sequence)

- set_fact:
    user_list: "{{ user_list_info.files | map(attribute='path') | map('regex_replace', '^.*/(.+)$', '\\1') | list }}"
  when: user_list_info is defined

- name: "create {{app}}_admin staff"
  user:
    name:   "{{ item.username | item }}"
    state:  present
    groups: "{{app}}_admin"
  with_items: "{{ user_list }}"
  when: user_list is defined

- name: "create .ssh dir for {{app}}_admin staff"
  file:
    path:  "/home/{{ item.username | item }}/.ssh"
    owner: "{{ item.username | item }}"
    group: "{{ item.username | item }}"
    state: directory
    mode:  0700
  with_items: "{{ user_list }}"
  when: user_list is defined

- name: "create /opt/{{app}} dir"
  file:
    path:  "/opt/{{app}}"
    owner: root
    group: "{{app}}"
    state: directory
    mode:  0750

- name: "create /opt/{{app}}/bin dir"
  file:
    path:  "/opt/{{app}}/bin"
    owner: root
    group: "{{app}}"
    state: directory
    mode:  0750

- name: "create /opt/{app}}/bin/clean.sh"
  copy:
    src:   bin/clean.sh
    dest:  "/opt/{{app}}/bin/clean.sh"
    owner: root
    group: "{{app}}"
    mode:  0750

- name: "add /opt/{{app}}/bin/clean.sh (0 0 * * *) entry to cron"
  cron:
    name:   "clean"
    hour:   "0"
    minute: "0"
    job:    "/opt/{{app}}/bin/clean.sh"

- name: "ensure ssh keys in authorized_keys of {{app}}_admin staff"
  copy:
    src:   "ssh/authorized_keys/{{ item.username | item }}"
    dest:  "/home/{{ item.username | item }}/.ssh/authorized_keys"
    owner: "{{ item.username | item }}"
    group: "{{ item.username | item }}"
    mode:  0600
  with_items: "{{ user_list }}"
  when: user_list is defined

- name: "copy {{app}} ssh ca cert"
  copy:
    src:   ssh/authorized_keys/.ca.pub
    dest:  "{{ ssh_ca_cert_path }}"
    owner: root
    group: root
    mode:  0400

- name: "add {{app}} ssh TrustUserCaKeys"
  lineinfile:
    path:   /etc/ssh/sshd_config
    state:  present
    regexp: '^(#|\s)*TrustedUserCAKeys\s+.*$'
    line:   "TrustedUserCAKeys {{ ssh_ca_cert_path }}"

- name: "add {{app}} ssh revoked keys"
  copy:
    content: ""
    dest:    "{{ ssh_revoked_keys_path }}"
    group:   root
    owner:   root
    mode:    0600

- name: "add {{app}} ssh RevokedKeys"
  lineinfile:
    path:   /etc/ssh/sshd_config
    state:  present
    regexp: '^(#|\s)*RevokedKeys\s+.*$'
    line:   "RevokedKeys {{ ssh_revoked_keys_path }}"

- name: "add {{app}} ssh authorized principals file"
  copy:
    content: ""
    dest:  "{{ ssh_authorized_principals_file_path }}"
    group: root
    owner: root
    mode:  0600

# - name: "add {{app}} ssh AuthorizedPrincipalsFile"
#   lineinfile:
#     path:   /etc/ssh/sshd_config
#     state:  present
#     regexp: '^(#|\s)*AuthorizedPrincipalsFile\s+.*$'
#     line:   "AuthorizedPrincipalsFile {{ ssh_authorized_principals_file_path }}"

- name: disable root ssh
  lineinfile:
    path:   /etc/ssh/sshd_config
    state:  present
    regexp: '^(#|\s)*PermitRootLogin\s+.*$'
    line:   "PermitRootLogin no"
